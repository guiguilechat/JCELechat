package fr.guiguilechat.jcelechat.model.sde.types.skill;

import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import fr.guiguilechat.jcelechat.model.sde.Attribute;
import fr.guiguilechat.jcelechat.model.sde.IMetaCategory;
import fr.guiguilechat.jcelechat.model.sde.IMetaGroup;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultIntValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.HighIsGood;
import fr.guiguilechat.jcelechat.model.sde.annotations.Stackable;
import fr.guiguilechat.jcelechat.model.sde.attributes.AdvancedIndustrySkillIndustryJobTimeBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.AmarrTechMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.CaldariTechMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.CanNotBeTrainedOnTrial;
import fr.guiguilechat.jcelechat.model.sde.attributes.Capacity;
import fr.guiguilechat.jcelechat.model.sde.attributes.DurationSkillBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.GallenteTechMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.ManufactureTimePerLevel;
import fr.guiguilechat.jcelechat.model.sde.attributes.ManufacturingSlotBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.ManufacturingTimeBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.PrimaryAttribute;
import fr.guiguilechat.jcelechat.model.sde.attributes.Radius;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill2;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill2Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill3;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill3Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.SecondaryAttribute;
import fr.guiguilechat.jcelechat.model.sde.attributes.SkillLevel;
import fr.guiguilechat.jcelechat.model.sde.attributes.SkillTimeConstant;
import fr.guiguilechat.jcelechat.model.sde.types.Skill;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;

public class Production
    extends Skill
{
    /**
     * A bonus to all industry job times for the advanced industry skill
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int advancedindustryskillindustryjobtimebonus;
    /**
     * Autogenerated skill attribute, amarrTechMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int amarrtechmutator;
    /**
     * Autogenerated skill attribute, caldariTechMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int caldaritechmutator;
    /**
     * If set to 1 then this skill can not be trained on accounts that are marked as Alpha Clone. Any other value (although you should probably use 0) will result in all accounts being able to train this skill.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(1)
    public int cannotbetrainedontrial;
    /**
     * Autogenerated skill attribute, DurationBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int durationskillbonus;
    /**
     * Autogenerated skill attribute, gallenteTechMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int gallentetechmutator;
    /**
     * Skill bonus per level to manufacturing time efficiency. Only applies to skills required to manufacture the blueprint.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int manufacturetimeperlevel;
    /**
     * Autogenerated skill attribute, manufacturingSlotBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int manufacturingslotbonus;
    /**
     * Autogenerated skill attribute, manufacturingTimeBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int manufacturingtimebonus;
    /**
     * The type ID of the skill that is required.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill2;
    /**
     * Required skill level for skill 2
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill2level;
    /**
     * The type ID of the skill that is required.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill3;
    /**
     * Required skill level for skill 3
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill3level;
    /**
     * Level of skill
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int skilllevel;
    public static final Set<Attribute> ATTRIBUTES = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(new Attribute[] {ManufacturingSlotBonus.INSTANCE, Radius.INSTANCE, Capacity.INSTANCE, AdvancedIndustrySkillIndustryJobTimeBonus.INSTANCE, AmarrTechMutator.INSTANCE, CaldariTechMutator.INSTANCE, SkillTimeConstant.INSTANCE, GallenteTechMutator.INSTANCE, PrimaryAttribute.INSTANCE, RequiredSkill1Level.INSTANCE, SecondaryAttribute.INSTANCE, RequiredSkill2Level.INSTANCE, RequiredSkill1 .INSTANCE, RequiredSkill3Level.INSTANCE, RequiredSkill2 .INSTANCE, CanNotBeTrainedOnTrial.INSTANCE, SkillLevel.INSTANCE, RequiredSkill3 .INSTANCE, DurationSkillBonus.INSTANCE, ManufacturingTimeBonus.INSTANCE, ManufactureTimePerLevel.INSTANCE })));
    public static final Production.MetaGroup METAGROUP = new Production.MetaGroup();

    @Override
    public Number valueSet(Attribute attribute) {
        switch (attribute.getId()) {
            case  1961 :
            {
                return advancedindustryskillindustryjobtimebonus;
            }
            case  370 :
            {
                return amarrtechmutator;
            }
            case  371 :
            {
                return caldaritechmutator;
            }
            case  1047 :
            {
                return cannotbetrainedontrial;
            }
            case  312 :
            {
                return durationskillbonus;
            }
            case  372 :
            {
                return gallentetechmutator;
            }
            case  1982 :
            {
                return manufacturetimeperlevel;
            }
            case  450 :
            {
                return manufacturingslotbonus;
            }
            case  440 :
            {
                return manufacturingtimebonus;
            }
            case  183 :
            {
                return requiredskill2;
            }
            case  278 :
            {
                return requiredskill2level;
            }
            case  184 :
            {
                return requiredskill3;
            }
            case  279 :
            {
                return requiredskill3level;
            }
            case  280 :
            {
                return skilllevel;
            }
            default:
            {
                return super.valueSet((attribute));
            }
        }
    }

    @Override
    public Set<Attribute> getAttributes() {
        return ATTRIBUTES;
    }

    @Override
    public IMetaGroup<Production> getGroup() {
        return METAGROUP;
    }

    public static class MetaGroup
        implements IMetaGroup<Production>
    {
        public static final String RESOURCE_PATH = "SDE/types/skill/Production.yaml";
        private Map<Integer, Production> cache = (null);

        @Override
        public IMetaCategory<? super Production> category() {
            return Skill.METACAT;
        }

        @Override
        public int getGroupId() {
            return  268;
        }

        @Override
        public String getName() {
            return "Production";
        }

        @Override
        public synchronized Map<Integer, Production> load() {
            if (cache == null) {
                try(final InputStreamReader reader = new InputStreamReader(Production.MetaGroup.class.getClassLoader().getResourceAsStream((RESOURCE_PATH)))) {
                    LoaderOptions options = new LoaderOptions();
                    options.setCodePointLimit(Integer.MAX_VALUE);
                    cache = new Yaml(options).loadAs(reader, (Container.class)).types;
                } catch (final Exception exception) {
                    throw new UnsupportedOperationException("catch this", exception);
                }
            }
            return Collections.unmodifiableMap(cache);
        }

        private static class Container {
            public LinkedHashMap<Integer, Production> types;
        }
    }
}
