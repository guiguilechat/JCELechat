package fr.guiguilechat.jcelechat.model.sde.types.skill;

import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import fr.guiguilechat.jcelechat.model.sde.Attribute;
import fr.guiguilechat.jcelechat.model.sde.IMetaCategory;
import fr.guiguilechat.jcelechat.model.sde.IMetaGroup;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultIntValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultRealValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.HighIsGood;
import fr.guiguilechat.jcelechat.model.sde.annotations.Stackable;
import fr.guiguilechat.jcelechat.model.sde.attributes.BountySkillBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.Capacity;
import fr.guiguilechat.jcelechat.model.sde.attributes.ConnectionBonusMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.CriminalConnectionsMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.DiplomacyMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.FastTalkMutator;
import fr.guiguilechat.jcelechat.model.sde.attributes.NegotiationBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.PrimaryAttribute;
import fr.guiguilechat.jcelechat.model.sde.attributes.Radius;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill2;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill2Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.SecondaryAttribute;
import fr.guiguilechat.jcelechat.model.sde.attributes.SkillLevel;
import fr.guiguilechat.jcelechat.model.sde.attributes.SkillTimeConstant;
import fr.guiguilechat.jcelechat.model.sde.attributes.SocialMutator;
import fr.guiguilechat.jcelechat.model.sde.types.Skill;
import org.yaml.snakeyaml.Yaml;

public class Social
    extends Skill
{
    /**
     * Autogenerated skill attribute, bountySkillBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int bountyskillbonus;
    /**
     * Autogenerated skill attribute, connectionBonusMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double connectionbonusmutator;
    /**
     * Autogenerated skill attribute, criminalConnectionsMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double criminalconnectionsmutator;
    /**
     * Autogenerated skill attribute, diplomacyMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double diplomacymutator;
    /**
     * Autogenerated skill attribute, fastTalkMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int fasttalkmutator;
    /**
     * Autogenerated skill attribute, NegotiationBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int negotiationbonus;
    /**
     * The type ID of the skill that is required.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill2;
    /**
     * Required skill level for skill 2
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill2level;
    /**
     * Autogenerated skill attribute, socialMutator
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int socialmutator;
    public static final Set<Attribute> ATTRIBUTES = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(new Attribute[] {Radius.INSTANCE, Capacity.INSTANCE, BountySkillBonus.INSTANCE, SkillTimeConstant.INSTANCE, PrimaryAttribute.INSTANCE, NegotiationBonus.INSTANCE, RequiredSkill1Level.INSTANCE, SecondaryAttribute.INSTANCE, RequiredSkill2Level.INSTANCE, SocialMutator.INSTANCE, RequiredSkill1 .INSTANCE, RequiredSkill2 .INSTANCE, SkillLevel.INSTANCE, ConnectionBonusMutator.INSTANCE, CriminalConnectionsMutator.INSTANCE, DiplomacyMutator.INSTANCE, FastTalkMutator.INSTANCE })));
    public static final Social.MetaGroup METAGROUP = new Social.MetaGroup();

    @Override
    public Number valueSet(Attribute attribute) {
        switch (attribute.getId()) {
            case  627 :
            {
                return bountyskillbonus;
            }
            case  412 :
            {
                return connectionbonusmutator;
            }
            case  413 :
            {
                return criminalconnectionsmutator;
            }
            case  414 :
            {
                return diplomacymutator;
            }
            case  415 :
            {
                return fasttalkmutator;
            }
            case  437 :
            {
                return negotiationbonus;
            }
            case  183 :
            {
                return requiredskill2;
            }
            case  278 :
            {
                return requiredskill2level;
            }
            case  438 :
            {
                return socialmutator;
            }
            default:
            {
                return super.valueSet((attribute));
            }
        }
    }

    @Override
    public Set<Attribute> getAttributes() {
        return ATTRIBUTES;
    }

    @Override
    public IMetaGroup<Social> getGroup() {
        return METAGROUP;
    }

    public static class MetaGroup
        implements IMetaGroup<Social>
    {
        public static final String RESOURCE_PATH = "SDE/types/skill/Social.yaml";
        private Map<String, Social> cache = (null);

        @Override
        public IMetaCategory<? super Social> category() {
            return Skill.METACAT;
        }

        @Override
        public int getGroupId() {
            return  278;
        }

        @Override
        public String getName() {
            return "Social";
        }

        @Override
        public synchronized Map<String, Social> load() {
            if (cache == null) {
                try(final InputStreamReader reader = new InputStreamReader(Social.MetaGroup.class.getClassLoader().getResourceAsStream((RESOURCE_PATH)))) {
                    cache = new Yaml().loadAs(reader, (Container.class)).types;
                } catch (final Exception exception) {
                    throw new UnsupportedOperationException("catch this", exception);
                }
            }
            return Collections.unmodifiableMap(cache);
        }

        private static class Container {
            public LinkedHashMap<String, Social> types;
        }
    }
}
