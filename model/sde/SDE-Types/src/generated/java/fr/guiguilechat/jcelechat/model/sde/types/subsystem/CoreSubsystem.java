package fr.guiguilechat.jcelechat.model.sde.types.subsystem;

import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import fr.guiguilechat.jcelechat.model.sde.Attribute;
import fr.guiguilechat.jcelechat.model.sde.IMetaCategory;
import fr.guiguilechat.jcelechat.model.sde.IMetaGroup;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultIntValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultRealValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.HighIsGood;
import fr.guiguilechat.jcelechat.model.sde.annotations.Stackable;
import fr.guiguilechat.jcelechat.model.sde.attributes.CapacitorCapacity;
import fr.guiguilechat.jcelechat.model.sde.attributes.Capacity;
import fr.guiguilechat.jcelechat.model.sde.attributes.CpuOutputBonus2;
import fr.guiguilechat.jcelechat.model.sde.attributes.FitsToShipType;
import fr.guiguilechat.jcelechat.model.sde.attributes.HiSlotModifier;
import fr.guiguilechat.jcelechat.model.sde.attributes.Hp;
import fr.guiguilechat.jcelechat.model.sde.attributes.LowSlotModifier;
import fr.guiguilechat.jcelechat.model.sde.attributes.MaxLockedTargetsBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.MedSlotModifier;
import fr.guiguilechat.jcelechat.model.sde.attributes.MetaLevelOld;
import fr.guiguilechat.jcelechat.model.sde.attributes.PowerEngineeringOutputBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.Radius;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubSystemSlot;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusAmarrCore;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusAmarrCore2;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusAmarrCore3;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusCaldariCore;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusCaldariCore2;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusCaldariCore3;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusGallenteCore;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusGallenteCore2;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusGallenteCore3;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusMinmatarCore;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusMinmatarCore2;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemBonusMinmatarCore3;
import fr.guiguilechat.jcelechat.model.sde.attributes.SubsystemEnergyNeutFittingReduction;
import fr.guiguilechat.jcelechat.model.sde.attributes.TechLevel;
import fr.guiguilechat.jcelechat.model.sde.types.Subsystem;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;

public class CoreSubsystem
    extends Subsystem
{
    /**
     * Capacitor capacity
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double capacitorcapacity;
    /**
     * Autogenerated skill attribute, cpu OutputBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double cpuoutputbonus2;
    /**
     * Additional amount of locked targets that can be handled.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int maxlockedtargetsbonus;
    /**
     * Autogenerated skill attribute, PowerOutputBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double powerengineeringoutputbonus;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusamarrcore;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusamarrcore2;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusamarrcore3;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonuscaldaricore;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonuscaldaricore2;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonuscaldaricore3;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double subsystembonusgallentecore;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double subsystembonusgallentecore2;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusgallentecore3;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusminmatarcore;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusminmatarcore2;
    /**
     * 
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystembonusminmatarcore3;
    /**
     * 
     */
    @HighIsGood(false)
    @Stackable(true)
    @DefaultIntValue(0)
    public int subsystemenergyneutfittingreduction;
    public static final Set<Attribute> ATTRIBUTES = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(new Attribute[] {Hp.INSTANCE, RequiredSkill1Level.INSTANCE, SubSystemSlot.INSTANCE, SubsystemBonusAmarrCore.INSTANCE, SubsystemBonusGallenteCore.INSTANCE, HiSlotModifier.INSTANCE, MedSlotModifier.INSTANCE, LowSlotModifier.INSTANCE, SubsystemBonusCaldariCore.INSTANCE, CapacitorCapacity.INSTANCE, Radius.INSTANCE, FitsToShipType.INSTANCE, SubsystemBonusAmarrCore2 .INSTANCE, SubsystemBonusMinmatarCore.INSTANCE, TechLevel.INSTANCE, Capacity.INSTANCE, CpuOutputBonus2 .INSTANCE, SubsystemEnergyNeutFittingReduction.INSTANCE, MaxLockedTargetsBonus.INSTANCE, SubsystemBonusCaldariCore2 .INSTANCE, SubsystemBonusGallenteCore2 .INSTANCE, SubsystemBonusMinmatarCore2 .INSTANCE, RequiredSkill1 .INSTANCE, PowerEngineeringOutputBonus.INSTANCE, SubsystemBonusAmarrCore3 .INSTANCE, MetaLevelOld.INSTANCE, SubsystemBonusCaldariCore3 .INSTANCE, SubsystemBonusGallenteCore3 .INSTANCE, SubsystemBonusMinmatarCore3 .INSTANCE })));
    public static final CoreSubsystem.MetaGroup METAGROUP = new CoreSubsystem.MetaGroup();

    @Override
    public Number valueSet(Attribute attribute) {
        switch (attribute.getId()) {
            case  482 :
            {
                return capacitorcapacity;
            }
            case  424 :
            {
                return cpuoutputbonus2;
            }
            case  235 :
            {
                return maxlockedtargetsbonus;
            }
            case  313 :
            {
                return powerengineeringoutputbonus;
            }
            case  1431 :
            {
                return subsystembonusamarrcore;
            }
            case  1509 :
            {
                return subsystembonusamarrcore2;
            }
            case  2681 :
            {
                return subsystembonusamarrcore3;
            }
            case  1441 :
            {
                return subsystembonuscaldaricore;
            }
            case  1515 :
            {
                return subsystembonuscaldaricore2;
            }
            case  2683 :
            {
                return subsystembonuscaldaricore3;
            }
            case  1436 :
            {
                return subsystembonusgallentecore;
            }
            case  1519 :
            {
                return subsystembonusgallentecore2;
            }
            case  2685 :
            {
                return subsystembonusgallentecore3;
            }
            case  1446 :
            {
                return subsystembonusminmatarcore;
            }
            case  1525 :
            {
                return subsystembonusminmatarcore2;
            }
            case  2687 :
            {
                return subsystembonusminmatarcore3;
            }
            case  2665 :
            {
                return subsystemenergyneutfittingreduction;
            }
            default:
            {
                return super.valueSet((attribute));
            }
        }
    }

    @Override
    public Set<Attribute> getAttributes() {
        return ATTRIBUTES;
    }

    @Override
    public IMetaGroup<CoreSubsystem> getGroup() {
        return METAGROUP;
    }

    public static class MetaGroup
        implements IMetaGroup<CoreSubsystem>
    {
        public static final String RESOURCE_PATH = "SDE/types/subsystem/CoreSubsystem.yaml";
        private Map<Integer, CoreSubsystem> cache = (null);

        @Override
        public IMetaCategory<? super CoreSubsystem> category() {
            return Subsystem.METACAT;
        }

        @Override
        public int getGroupId() {
            return  958;
        }

        @Override
        public String getName() {
            return "CoreSubsystem";
        }

        @Override
        public synchronized Map<Integer, CoreSubsystem> load() {
            if (cache == null) {
                try(final InputStreamReader reader = new InputStreamReader(CoreSubsystem.MetaGroup.class.getClassLoader().getResourceAsStream((RESOURCE_PATH)))) {
                    LoaderOptions options = new LoaderOptions();
                    options.setCodePointLimit(Integer.MAX_VALUE);
                    cache = new Yaml(options).loadAs(reader, (Container.class)).types;
                } catch (final Exception exception) {
                    throw new UnsupportedOperationException("catch this", exception);
                }
            }
            return Collections.unmodifiableMap(cache);
        }

        private static class Container {
            public LinkedHashMap<Integer, CoreSubsystem> types;
        }
    }
}
