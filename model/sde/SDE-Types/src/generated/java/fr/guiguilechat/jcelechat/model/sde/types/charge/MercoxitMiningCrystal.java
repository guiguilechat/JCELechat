package fr.guiguilechat.jcelechat.model.sde.types.charge;

import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import fr.guiguilechat.jcelechat.model.sde.Attribute;
import fr.guiguilechat.jcelechat.model.sde.IMetaCategory;
import fr.guiguilechat.jcelechat.model.sde.IMetaGroup;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultIntValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.DefaultRealValue;
import fr.guiguilechat.jcelechat.model.sde.annotations.HighIsGood;
import fr.guiguilechat.jcelechat.model.sde.annotations.Stackable;
import fr.guiguilechat.jcelechat.model.sde.attributes.CapNeedBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.Capacity;
import fr.guiguilechat.jcelechat.model.sde.attributes.ChargeSize;
import fr.guiguilechat.jcelechat.model.sde.attributes.CrystalVolatilityChance;
import fr.guiguilechat.jcelechat.model.sde.attributes.CrystalVolatilityDamage;
import fr.guiguilechat.jcelechat.model.sde.attributes.CrystalsGetDamaged;
import fr.guiguilechat.jcelechat.model.sde.attributes.Damage;
import fr.guiguilechat.jcelechat.model.sde.attributes.Hp;
import fr.guiguilechat.jcelechat.model.sde.attributes.LauncherGroup;
import fr.guiguilechat.jcelechat.model.sde.attributes.MainColor;
import fr.guiguilechat.jcelechat.model.sde.attributes.MetaLevelOld;
import fr.guiguilechat.jcelechat.model.sde.attributes.Radius;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill1Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill2;
import fr.guiguilechat.jcelechat.model.sde.attributes.RequiredSkill2Level;
import fr.guiguilechat.jcelechat.model.sde.attributes.SpecializationAsteroidDurationMultiplier;
import fr.guiguilechat.jcelechat.model.sde.attributes.SpecializationAsteroidTypeList;
import fr.guiguilechat.jcelechat.model.sde.attributes.SpecializationAsteroidYieldMultiplier;
import fr.guiguilechat.jcelechat.model.sde.attributes.SpecializationCrystalMiningWasteProbabilityBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.SpecializationCrystalMiningWastedVolumeMultiplierBonus;
import fr.guiguilechat.jcelechat.model.sde.attributes.TechLevel;
import fr.guiguilechat.jcelechat.model.sde.attributes.UnfitCapCost;
import fr.guiguilechat.jcelechat.model.sde.types.Charge;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;

public class MercoxitMiningCrystal
    extends Charge
{
    /**
     * Autogenerated skill attribute, capNeedBonus
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int capneedbonus;
    /**
     * The size of the charges that can fit in the turret/whatever.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int chargesize;
    /**
     * The chance of damage to the crystal each time it is used.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double crystalvolatilitychance;
    /**
     * The amount of damage done if the crystal is damaged in the process of using it.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double crystalvolatilitydamage;
    /**
     * Whether this tool causes damage to crystals with each use of them.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int crystalsgetdamaged;
    /**
     * current structure damage dealt to module
     */
    @HighIsGood(false)
    @Stackable(true)
    @DefaultIntValue(0)
    public int damage;
    /**
     * The maximum hitpoints of an object.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double hp;
    /**
     * One of the groups of launcher this charge can be loaded into.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int launchergroup;
    /**
     * The main color of a ship type.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int maincolor;
    /**
     * Authoring has been moved to FSD
     * The ranking of the module within its tech level
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int metalevelold;
    /**
     * The type ID of the skill that is required.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill1;
    /**
     * Required skill level for skill 1
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill1level;
    /**
     * The type ID of the skill that is required.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill2;
    /**
     * Required skill level for skill 2
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int requiredskill2level;
    /**
     * The amount the mining duration is modified when mining the asteroid group this crystal is tuned for.
     */
    @HighIsGood(false)
    @Stackable(true)
    @DefaultRealValue(1.0)
    public double specializationasteroiddurationmultiplier;
    /**
     * The ID of a typelist of asteroid typeIDs that a mining crystal can affect
     */
    @HighIsGood(false)
    @Stackable(false)
    @DefaultIntValue(0)
    public int specializationasteroidtypelist;
    /**
     * The amount the yield is modified when mining the asteroid group this crystal is tuned for.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultRealValue(0.0)
    public double specializationasteroidyieldmultiplier;
    /**
     * Attribute added to the waste probability (mainly used in mining crystals)
     */
    @HighIsGood(false)
    @Stackable(false)
    @DefaultRealValue(0.0)
    public double specializationcrystalminingwasteprobabilitybonus;
    /**
     * Attribute added to the waste multiplier (mainly used in mining crystals)
     */
    @HighIsGood(false)
    @Stackable(false)
    @DefaultIntValue(0)
    public int specializationcrystalminingwastedvolumemultiplierbonus;
    /**
     * Authoring has been moved to FSD
     * Tech level of an item
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(1)
    public int techlevel;
    /**
     * The capacitor charge required to disengage this crystal from the unit it is installed in.
     */
    @HighIsGood(true)
    @Stackable(true)
    @DefaultIntValue(0)
    public int unfitcapcost;
    public static final Set<Attribute> ATTRIBUTES = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(new Attribute[] {ChargeSize.INSTANCE, Radius.INSTANCE, Damage.INSTANCE, TechLevel.INSTANCE, Capacity.INSTANCE, Hp.INSTANCE, LauncherGroup.INSTANCE, SpecializationAsteroidTypeList.INSTANCE, SpecializationAsteroidYieldMultiplier.INSTANCE, CrystalVolatilityChance.INSTANCE, CrystalVolatilityDamage.INSTANCE, UnfitCapCost.INSTANCE, CrystalsGetDamaged.INSTANCE, RequiredSkill1Level.INSTANCE, RequiredSkill2Level.INSTANCE, RequiredSkill1 .INSTANCE, RequiredSkill2 .INSTANCE, SpecializationCrystalMiningWastedVolumeMultiplierBonus.INSTANCE, SpecializationCrystalMiningWasteProbabilityBonus.INSTANCE, SpecializationAsteroidDurationMultiplier.INSTANCE, MetaLevelOld.INSTANCE, MainColor.INSTANCE, CapNeedBonus.INSTANCE })));
    public static final MercoxitMiningCrystal.MetaGroup METAGROUP = new MercoxitMiningCrystal.MetaGroup();

    @Override
    public Number valueSet(Attribute attribute) {
        switch (attribute.getId()) {
            case  317 :
            {
                return capneedbonus;
            }
            case  128 :
            {
                return chargesize;
            }
            case  783 :
            {
                return crystalvolatilitychance;
            }
            case  784 :
            {
                return crystalvolatilitydamage;
            }
            case  786 :
            {
                return crystalsgetdamaged;
            }
            case  3 :
            {
                return damage;
            }
            case  9 :
            {
                return hp;
            }
            case  137 :
            {
                return launchergroup;
            }
            case  124 :
            {
                return maincolor;
            }
            case  633 :
            {
                return metalevelold;
            }
            case  182 :
            {
                return requiredskill1;
            }
            case  277 :
            {
                return requiredskill1level;
            }
            case  183 :
            {
                return requiredskill2;
            }
            case  278 :
            {
                return requiredskill2level;
            }
            case  3161 :
            {
                return specializationasteroiddurationmultiplier;
            }
            case  3148 :
            {
                return specializationasteroidtypelist;
            }
            case  782 :
            {
                return specializationasteroidyieldmultiplier;
            }
            case  3160 :
            {
                return specializationcrystalminingwasteprobabilitybonus;
            }
            case  3159 :
            {
                return specializationcrystalminingwastedvolumemultiplierbonus;
            }
            case  422 :
            {
                return techlevel;
            }
            case  785 :
            {
                return unfitcapcost;
            }
            default:
            {
                return super.valueSet((attribute));
            }
        }
    }

    @Override
    public Set<Attribute> getAttributes() {
        return ATTRIBUTES;
    }

    @Override
    public IMetaGroup<MercoxitMiningCrystal> getGroup() {
        return METAGROUP;
    }

    public static class MetaGroup
        implements IMetaGroup<MercoxitMiningCrystal>
    {
        public static final String RESOURCE_PATH = "SDE/types/charge/MercoxitMiningCrystal.yaml";
        private Map<String, MercoxitMiningCrystal> cache = (null);

        @Override
        public IMetaCategory<? super MercoxitMiningCrystal> category() {
            return Charge.METACAT;
        }

        @Override
        public int getGroupId() {
            return  663;
        }

        @Override
        public String getName() {
            return "MercoxitMiningCrystal";
        }

        @Override
        public synchronized Map<String, MercoxitMiningCrystal> load() {
            if (cache == null) {
                try(final InputStreamReader reader = new InputStreamReader(MercoxitMiningCrystal.MetaGroup.class.getClassLoader().getResourceAsStream((RESOURCE_PATH)))) {
                    LoaderOptions options = new LoaderOptions();
                    options.setCodePointLimit(Integer.MAX_VALUE);
                    cache = new Yaml(options).loadAs(reader, (Container.class)).types;
                } catch (final Exception exception) {
                    throw new UnsupportedOperationException("catch this", exception);
                }
            }
            return Collections.unmodifiableMap(cache);
        }

        private static class Container {
            public LinkedHashMap<String, MercoxitMiningCrystal> types;
        }
    }
}
